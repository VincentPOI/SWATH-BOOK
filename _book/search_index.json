[
["index.html", "SWATH-MS quantification differential expression analysis 1 Introduction", " SWATH-MS quantification differential expression analysis 1 Introduction SWATH-MS is a data-independent acquisition mass spectrometry techinique that allows to identify and quantify a great number of protein in a single sample. This technique is therefore suitable for proteomics studies trying to assess the variation in the protein expression of differents conditions. The raw data doesn’t allow to conclude on a differential expression because there are bias introduce by the experiment preparation and the tools used, to consider those bias the data needs to be normalized, and to be sure the results aren’t random, statistical test need to be perform. Differents kind of statistical test can be performed on the SWATH data, this book explain how to perfom the test then extract and visualize the results of three techniques : the Student’s test LIMMA ANOVA The data in this example comes from : Bjelosevic S, Pascovici D, Ping H, et.al. Quantitative age-specific variability of plasma proteins in healthy neonates, children and adults. Molecular &amp; Cellular Proteomics (March 23 2017). The studies try to understand the impact of the life stage on protein expression. Four age group are compared each age group comport ten replicates : neonates child less than one year old child between 1 and five years old adults 146 proteins were identified and quantified in this study. "],
["students-test.html", "2 Student’s test 2.1 Loading and visualizing the data 2.2 Log transformation 2.3 Normalization 2.4 Differential expression annalysis", " 2 Student’s test In this part the data will be normalized using the mean center and scalling method, and to assess statistical significance of the differential expression we will use the Student’s test. The Student’s test is used to determine if two set’s of data are significantly different from each other by testing if the data a Student’s distribution. 2.1 Loading and visualizing the data data&lt;-read.table(&quot;SWATH.example.data.csv&quot;, sep=&quot;,&quot;,header=T, row.names = 1) DT::datatable(data) boxplot(data, ylab=&quot;Intensity&quot;, xlab=&quot;samples&quot;, main =&quot;Distrubution of the Intensities&quot;) hist(as.numeric(unlist(data)), main = &quot;Histogram of Intensity distribution&quot;, xlab = &quot;Intensity&quot;) 2.2 Log transformation The data is log transformed so that: -the spread is even across the intensity range -the variability stays constant at all intensity levels -the distribution of experimental errors is normal (necessary to apply most of the statistical test) -the distribution of intensity is bell shaped This allows to apply statistical test that relies on those assumptions. data &lt;- log2(data) boxplot(data, ylab=&quot;log2(Intensity)&quot;, xlab=&quot;samples&quot;,main =&quot;Distrubution of the log transformed Intensities&quot;) hist(as.numeric(unlist(data)), main = &quot;Histogram of the log transformed Intensities distribution&quot;, xlab = &quot;log2(Intensity)&quot;) 2.3 Normalization Normalization allows to resolve the bias and errors introduced between the samples by the experimental tools or the samples preparation. Normalization relies on the fact that most of the proteins are expected to be expressed the same way between the samples, so it is necessary to remove the differences induced by the experiment to not overestimate the differencial expression. here we use the mean center and scaling normalization : centering assure that the mean of the different samples is equal (set to 0), and scaling sets the standard deviation to 1. norm.data &lt;- scale(data) ##mean center and scaling normalization boxplot(norm.data, ylab=&quot;Intensity&quot;, xlab=&quot;samples&quot;) 2.4 Differential expression annalysis The differential expression analysis consist of calculting the fold change and the p value between different conditions. In this case four pairwise comparisons are performed. 2.4.1 Experimental design In order to perform the pairwise comparison we need to define the experimental design : the design matrix generated with model.matrix(), which identify which sample belong to which condition. #for this specific data four conditions with ten replicates each: #creating a experimental design exp.design &lt;- data.frame(samples = colnames(data), condition = 1) exp.design$condition[1:10] = &quot;neonates&quot; exp.design$condition[11:20] = &quot;lessone&quot; exp.design$condition[21:30] = &quot;onetofive&quot; exp.design$condition[31:40] = &quot;adult&quot; #generating the design matrix: design &lt;- model.matrix(~0 + exp.design$condition, data = exp.design) colnames(design) &lt;- sort(unique(exp.design$condition)) row.names(design) &lt;- exp.design$samples DT::datatable(as.data.frame(design)) the contrast matrix generated with makeContrasts(), which define the comparison to perform between the differents conditions. library(limma) contrast &lt;- makeContrasts(adult-neonates, lessone-neonates, onetofive-neonates, adult+lessone+onetofive-neonates, levels=design) DT::datatable(as.data.frame(contrast)) 2.4.2 Fold change and Student’s test For each comparison and for each protein the fold change and the student p value are calculated. the results are stocked in a list of data frame (each data frame is the result for one comparison defined in the contrast matrix). The fold change is the mean intensity difference between two condition, a fold change of zero means no difference a negative one a down-regulation and a positive one an up-regulation. The Student’s test performed is and independant two sided t-test, because the samples come from differents patient and we test for both an up or a down regulation. # in this example there are four pairwise comparison to perform: # The contrast matrix allows to create a loop that generates the results for the differents pairwise comparisons. nbComp&lt;-ncol(contrast) Results&lt;-list() # a list of data frames containing the results for (i in 1:nbComp){ # for each comparison defined in the contrast matrix : c1&lt;-row.names(contrast)[contrast[,i] == 1 ] # names of the first conditions of the pairwise comparison c2&lt;-row.names(contrast)[contrast[,i] == -1 ] # names of the second conditions of the pairwise comparison samplesc1 &lt;- row.names(design)[row(as.matrix(design[,c1]))[design[,c1]==1]] # names of the samples belonging to the first conditions of the pairwise comparison samplesc2 &lt;- row.names(design)[row(as.matrix(design[,c2]))[design[,c2]==1]] # names of the samples belonging to the second conditions of the pairwise comparison colc1 &lt;- which(colnames(norm.data) %in% samplesc1) # columns number in the dataset of the samples for the first comparison of the pairwise comparison colc2 &lt;- which(colnames(norm.data) %in% samplesc2) # columns number in the dataset of the samples for the second comparison of the pairwise comparison p.value&lt;-apply(norm.data,1,function(x){t.test(as.numeric(x[colc2]),as.numeric(x[colc1]), alternative = &quot;t&quot;) $p.value}) # calcul of the p.value of the student test between the conditions of the pairwise comparison adjust.p.value&lt;-p.adjust(p.value, method = &quot;BH&quot;) # corrrection of the p.value with the Benjamini &amp; Hochberg technique fc&lt;-rowMeans(norm.data[,colc1])-rowMeans(norm.data[,colc2]) # fold change calcul between the conditions of the pairwise comparison # stocking the data frame containing the results in a list : Results[[i]]&lt;-data.frame(protein=c(row.names(norm.data))) Results[[i]][paste(&quot;p.value.&quot;,colnames(contrast)[i],sep=&quot;&quot;)]=c(p.value) Results[[i]][paste(&quot;adjust.p.value.&quot;,colnames(contrast)[i],sep=&quot;&quot;)]=c(adjust.p.value) Results[[i]][paste(&quot;fc.&quot;,colnames(contrast)[i],sep=&quot;&quot;)]=c(fc) } 2.4.3 Differentially expressed proteins A protein is considered differentially expressed if its p.value and fold change are superior to a determined threshold. The fold change represent how much a protein is differentially expressed between two conditions and the p value allows to evaluate the statistical significance of this difference. thresh_fc &lt;- 0.5 thresh_p &lt;- 0.05 deProt &lt;- Results for(i in 1:length(Results)){ fc = as.data.frame(deProt[[i]])[,4] p = as.data.frame(deProt[[i]])[,3] dt &lt;-as.data.frame(deProt[[i]]) deProt[[i]] &lt;- dt[which(p&lt;=thresh_p &amp; abs(fc)&gt;=thresh_fc),] } 2.4.4 Volcano Plot For each pairwise comparison in the results list a volcano plot is created, volcano plots are the best way to visualise the p value and the fold change at the same time. library(ggplot2) library(ggrepel) tresh_fc = 0.5 # Fold change threshold tresh_p = 0.05 # p.value treshold for(i in 1:length(Results)){ plotTitle &lt;- substr(colnames(Results[[i]])[2], 9 ,nchar(colnames(Results[[i]])[2])) values &lt;- as.data.frame(Results[[i]]) forplot &lt;- data.frame(x=as.numeric(values[,4]), y=-log10(values[,3]), id=as.character(values[,1])) tmp &lt;- forplot[as.numeric(forplot$y)&gt;=-log10(tresh_fc) &amp; abs(forplot$x)&gt;tresh_fc,] p &lt;- ggplot(forplot) + geom_point(aes(x, y , color = ifelse(y&gt;=-log10(tresh_p) &amp; abs(x)&gt;=tresh_fc, &quot;not signi&quot;, &quot;FC&quot;)),show.legend = F) + scale_color_manual(values = c(&quot;blue&quot;, &quot;red&quot;)) + geom_text_repel(data = subset(forplot, abs(forplot$x)&gt;=tresh_fc &amp; forplot$y&gt;=-log10(tresh_p)), aes(x,y,label = id), size = 2) + geom_vline(xintercept = tresh_fc ) + geom_vline(xintercept = -tresh_fc) + geom_hline(yintercept = -log10(tresh_p)) + labs(title = plotTitle,x=&quot;log2(Fold-change)&quot;, y=&quot;-log10(P.Value)&quot;) + theme_bw() print(p) } 2.4.5 Ven Diagramm List of the proteins deemed as differentially expressed in all of the pairwise comparisons : res &lt;- vector() for(i in 1:length(deProt)){ res &lt;- append(res, as.character(deProt[[i]][,1])) } res &lt;- unique(res) saveRDS(res, &quot;resSCL.rds&quot;) #saving the name of the differentially expressed proteins in a R object. print(res) ## [1] &quot;sp|A0M8Q6|LAC7_HUMAN&quot; &quot;sp|O43866|CD5L_HUMAN&quot; ## [3] &quot;sp|P00738|HPT_HUMAN&quot; &quot;sp|P01591|IGJ_HUMAN&quot; ## [5] &quot;sp|P01871|IGHM_HUMAN&quot; &quot;sp|P01876|IGHA1_HUMAN&quot; ## [7] &quot;sp|P01877|IGHA2_HUMAN&quot; &quot;sp|P02452|CO1A1_HUMAN&quot; ## [9] &quot;sp|P02771|FETA_HUMAN&quot; &quot;sp|P04220|MUCB_HUMAN&quot; ## [11] &quot;sp|P07951|TPM2_HUMAN&quot; &quot;sp|P68871|HBB_HUMAN&quot; ## [13] &quot;sp|P69891|HBG1_HUMAN&quot; &quot;sp|P69892|HBG2_HUMAN&quot; ## [15] &quot;sp|P69905|HBA_HUMAN&quot; &quot;sp|Q13790|APOF_HUMAN&quot; ## [17] &quot;sp|Q9Y490|TLN1_HUMAN&quot; &quot;sp|P01772|HV311_HUMAN&quot; ## [19] &quot;sp|P01780|HV319_HUMAN&quot; &quot;sp|P01834|IGKC_HUMAN&quot; ## [21] &quot;sp|P01861|IGHG4_HUMAN&quot; &quot;sp|P04196|HRG_HUMAN&quot; ## [23] &quot;sp|P04278|SHBG_HUMAN&quot; &quot;sp|P04430|KV122_HUMAN&quot; ## [25] &quot;sp|P04438|HV208_HUMAN&quot; &quot;sp|P06889|LV405_HUMAN&quot; ## [27] &quot;sp|P07357|CO8A_HUMAN&quot; &quot;sp|P80748|LV302_HUMAN&quot; ## [29] &quot;sp|P04003|C4BPA_HUMAN&quot; This Venn diagram allows to visualize the number of proteins deemed to be differentially expressed in each pairwise comparison. library(VennDiagram) ## Loading required package: grid ## Loading required package: futile.logger grid.newpage() draw.quad.venn(area1 = length(deProt[[1]][,1]), area2 = length(deProt[[2]][,1]), area3 = length(deProt[[3]][,1]), area4 = length(deProt[[4]][,1]), n12 = length(intersect(deProt[[1]][,1],deProt[[2]][,1])), n13 = length(intersect(deProt[[1]][,1],deProt[[3]][,1])), n14 = length(intersect(deProt[[1]][,1],deProt[[4]][,1])), n23 = length(intersect(deProt[[2]][,1],deProt[[3]][,1])), n24 = length(intersect(deProt[[2]][,1],deProt[[4]][,1])), n34 = length(intersect(deProt[[3]][,1],deProt[[4]][,1])), n123 = length(Reduce(intersect, list(deProt[[1]][,1],deProt[[2]][,1],deProt[[3]][,1]))), n124 = length(Reduce(intersect, list(deProt[[1]][,1],deProt[[2]][,1],deProt[[4]][,1]))), n134 = length(Reduce(intersect, list(deProt[[1]][,1],deProt[[3]][,1],deProt[[4]][,1]))), n234 = length(Reduce(intersect, list(deProt[[2]][,1],deProt[[3]][,1],deProt[[4]][,1]))), n1234 = length(Reduce(intersect,list(deProt[[1]][,1],deProt[[2]][,1],deProt[[3]][,1],deProt[[4]][,1]))), category = c(&quot;a-c&quot;,&quot;l-c&quot;,&quot;o-c&quot;,&quot;a+l+o-c&quot;), lty = &quot;blank&quot;, fill = c(&quot;skyblue&quot;, &quot;pink1&quot;, &quot;mediumorchid&quot;, &quot;orange&quot;) ) ## (polygon[GRID.polygon.481], polygon[GRID.polygon.482], polygon[GRID.polygon.483], polygon[GRID.polygon.484], polygon[GRID.polygon.485], polygon[GRID.polygon.486], polygon[GRID.polygon.487], polygon[GRID.polygon.488], text[GRID.text.489], text[GRID.text.490], text[GRID.text.491], text[GRID.text.492], text[GRID.text.493], text[GRID.text.494], text[GRID.text.495], text[GRID.text.496], text[GRID.text.497], text[GRID.text.498], text[GRID.text.499], text[GRID.text.500], text[GRID.text.501], text[GRID.text.502], text[GRID.text.503], text[GRID.text.504], text[GRID.text.505], text[GRID.text.506], text[GRID.text.507]) "],
["limma.html", "3 LIMMA 3.1 loading and visualizing the data 3.2 Normalization 3.3 Differential expression annalysis", " 3 LIMMA Here we gonna use the limma package to perform the normalization of the data and the differential expression annalysis. Limma is a Bioconductor package which uses linear model for analysing experiments and the assessment of differential expression. 3.1 loading and visualizing the data data&lt;-read.table(&quot;SWATH.example.data.csv&quot;, sep=&quot;,&quot;,header=T, row.names = 1) DT::datatable(data) boxplot(data, ylab=&quot;log2(Intensity)&quot;, xlab=&quot;samples&quot;, main = &quot;distribution of Intensity&quot;) hist(as.numeric(unlist(data)), main = &quot;Histogram of Intensity distribution&quot;, xlab = &quot;Intensity&quot;) 3.2 Normalization 3.2.1 design and contrast matrix In order to perform the normalization with the limma package we need to define the design matrix generated with model.matrix(), which identify which sample belong to which condition. #for this specific data : exp.design &lt;- data.frame(samples = colnames(data), condition = 1) ## first we define a matrix containing the experiment design information by associating a sample name with the condition name exp.design$condition[1:10] = &quot;neonates&quot; exp.design$condition[11:20] = &quot;lessone&quot; exp.design$condition[21:30] = &quot;onetofive&quot; exp.design$condition[31:40] = &quot;adult&quot; design &lt;- model.matrix(~0 + exp.design$condition, data = exp.design) ## model.matrix() use the experiment design to generate a matrix. colnames(design) &lt;- sort(unique(exp.design$condition)) row.names(design) &lt;- exp.design$samples DT::datatable(as.data.frame(design)) We also need to create a contrast matrix generated with the limma function makeContrast(). This matrix allows to define the comparisons between the differents conditions to perform. contrast &lt;- makeContrasts(adult-neonates, lessone-neonates, onetofive-neonates, levels=design) DT::datatable(as.data.frame(contrast)) 3.2.2 applying limma Now, we can normalise the dataset using the following commands. The calcNormFactors(), calculates the normalization factors to scale the library sizes. The limma package (since version 3.16.0) offers the voom function that will normalise the proteins intensity and apply a linear model to the normalised data before computing moderated t-statistics of differential expression. The returned data object consists of a few attributes, which you can check using names(y), one of which is the normalised expression (y$E) values in log2 scale. library(limma) library(edgeR) dge &lt;- DGEList(data) dge &lt;- calcNormFactors(dge) y &lt;- voom(dge, design) norm.data &lt;- y$E DT::datatable(as.data.frame(norm.data)) boxplot(norm.data, ylab=&quot;normalized Intensity&quot;, xlab=&quot;samples&quot;, main = &quot;distribution of the normalized Intensity&quot;) hist(norm.data, main = &quot;Histogram of Intensity distribution&quot;, xlab = &quot;Intensity&quot;) 3.3 Differential expression annalysis 3.3.1 fitting the model To fit the model, use the lmFit() function, which takes in the normalised data object and the design matrix: fit &lt;- lmFit(y, design) Refit the model using the comparisons defined: fit2 &lt;- contrasts.fit(fit, contrast) fit2 &lt;- eBayes(fit2) 3.3.2 Extracting the results The topTable function summarises the output from limma in a table format. adult.vs.neonates &lt;- topTable(fit2, coef = &quot;adult - neonates&quot;, n = nrow(fit2)) lessone.vs.neonates &lt;- topTable(fit2, coef = &quot;lessone - neonates&quot;, n = nrow(fit2)) onetofive.vs.neonates &lt;- topTable(fit2, coef = &quot;onetofive - neonates&quot;, n = nrow(fit2)) DT::datatable(adult.vs.neonates, caption = &quot;adult vs neonates&quot;) DT::datatable(lessone.vs.neonates, caption = &quot;less than one vs neonates&quot;) DT::datatable(onetofive.vs.neonates, caption = &quot;one to five vs neonates&quot;) We keep only the values of interest like the p value, the adjusted p value and the fold change to create the volcano plot. The results for the different pairwise comparison are stored in a list of dataframe. adult.vs.neonates$protein &lt;- row.names(adult.vs.neonates) row.names(adult.vs.neonates) &lt;- NULL adult.vs.neonates &lt;- adult.vs.neonates[, c(7, 4, 5, 1)] lessone.vs.neonates$protein &lt;- row.names(lessone.vs.neonates) row.names(lessone.vs.neonates) &lt;- NULL lessone.vs.neonates &lt;- lessone.vs.neonates[, c(7, 4, 5, 1)] onetofive.vs.neonates$protein &lt;- row.names(onetofive.vs.neonates) row.names(onetofive.vs.neonates) &lt;- NULL onetofive.vs.neonates &lt;- onetofive.vs.neonates[, c(7, 4, 5, 1)] Results &lt;- list(adult.vs.neonates, lessone.vs.neonates, onetofive.vs.neonates) 3.3.3 Differentially expressed proteins A protein is considered differentially expressed if its p.value and fold change are superior to a determined threshold. The fold change represent how much a protein is differentially expressed between two conditions and the p value allows to evaluate the statistical significance of this difference. thresh_fc &lt;- 0.5 thresh_p &lt;- 0.05 deProt &lt;- Results for(i in 1:length(Results)){ fc = as.data.frame(deProt[[i]])[,4] p = as.data.frame(deProt[[i]])[,3] dt &lt;-as.data.frame(deProt[[i]]) deProt[[i]] &lt;- dt[which(p&lt;=thresh_p &amp; abs(fc)&gt;=thresh_fc),] } 3.3.4 Volcano Plot For each pairwise comparison in the results list a volcano plot is created, volcano plots are the best way to visualise the p value and the fold change at the same time. library(ggplot2) library(plotly, quietly = TRUE) # using the plotly package to add interractivity to the plot ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(ggrepel) tresh_fc = 0.5 ## Fold change threshold tresh_p = 0.05 ## p.value treshold nameVplot = c(&quot;adult vs neonates&quot;,&quot;less than one vs neonates&quot;,&quot;one to five vs neonates&quot;) VP &lt;- list() #list containing the volcano to display them after the loop for(i in 1:length(Results)){ values &lt;- as.data.frame(Results[[i]]) forplot &lt;- data.frame(x=as.numeric(values[,4]), y=-log10(values[,3]), id=as.character(values[,1])) tmp &lt;- forplot[as.numeric(forplot$y)&gt;=-log10(tresh_fc) &amp; abs(forplot$x)&gt;tresh_fc,] p &lt;- ggplot(forplot) + geom_point(aes(x, y ,label = id, color = ifelse(y&gt;=-log10(tresh_p) &amp; abs(x)&gt;=tresh_fc,&quot;DE proteins&quot;, &quot;not significant&quot;)),show.legend = F) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) + geom_vline(xintercept = tresh_fc ) + geom_vline(xintercept = -tresh_fc) + geom_hline(yintercept = -log10(tresh_p)) + labs(title = nameVplot[i],x=&quot;log2(Fold-change)&quot;, y=&quot;-log10(P.Value)&quot;) + theme_bw() VP[[i]] &lt;- p } layout(ggplotly(VP[[1]], tooltip = c(&quot;x&quot;,&quot;y&quot;,&quot;id&quot;))) layout(ggplotly(VP[[2]], tooltip = c(&quot;x&quot;,&quot;y&quot;,&quot;id&quot;))) layout(ggplotly(VP[[3]], tooltip = c(&quot;x&quot;,&quot;y&quot;,&quot;id&quot;))) 3.3.5 Ven Diagramm List of the proteins deemed as differentially expressed in all of the pairwise comparisons : res &lt;- vector() for(i in 1:length(deProt)){ res &lt;- append(res, as.character(deProt[[i]][,1])) } res &lt;- unique(res) saveRDS(res, &quot;resLIMMA.rds&quot;) #saving the name of the differentially expressed proteins in a R object. print(res) ## [1] &quot;sp|P01876|IGHA1_HUMAN&quot; &quot;sp|P69892|HBG2_HUMAN&quot; ## [3] &quot;sp|P02452|CO1A1_HUMAN&quot; &quot;sp|P02790|HEMO_HUMAN&quot; ## [5] &quot;sp|P01877|IGHA2_HUMAN&quot; &quot;sp|P69891|HBG1_HUMAN&quot; ## [7] &quot;sp|P01591|IGJ_HUMAN&quot; &quot;sp|P01023|A2MG_HUMAN&quot; ## [9] &quot;sp|P01871|IGHM_HUMAN&quot; &quot;sp|P02649|APOE_HUMAN&quot; ## [11] &quot;sp|P04220|MUCB_HUMAN&quot; &quot;sp|Q13790|APOF_HUMAN&quot; ## [13] &quot;sp|O43866|CD5L_HUMAN&quot; &quot;sp|P69905|HBA_HUMAN&quot; ## [15] &quot;sp|P02771|FETA_HUMAN&quot; &quot;sp|Q06033|ITIH3_HUMAN&quot; ## [17] &quot;sp|P04003|C4BPA_HUMAN&quot; &quot;sp|P07225|PROS_HUMAN&quot; ## [19] &quot;sp|P05546|HEP2_HUMAN&quot; &quot;sp|P33151|CADH5_HUMAN&quot; ## [21] &quot;sp|P00747|PLMN_HUMAN&quot; &quot;sp|P10643|CO7_HUMAN&quot; ## [23] &quot;sp|P27169|PON1_HUMAN&quot; &quot;sp|P04196|HRG_HUMAN&quot; ## [25] &quot;sp|P10909|CLUS_HUMAN&quot; &quot;sp|P07360|CO8G_HUMAN&quot; ## [27] &quot;sp|P35858|ALS_HUMAN&quot; &quot;sp|Q96IY4|CBPB2_HUMAN&quot; ## [29] &quot;sp|Q9Y490|TLN1_HUMAN&quot; &quot;sp|P07358|CO8B_HUMAN&quot; ## [31] &quot;sp|P07951|TPM2_HUMAN&quot; &quot;sp|P02675|FIBB_HUMAN&quot; ## [33] &quot;sp|P60709|ACTB_HUMAN&quot; &quot;sp|P03952|KLKB1_HUMAN&quot; ## [35] &quot;sp|P01019|ANGT_HUMAN&quot; &quot;sp|P19652|A1AG2_HUMAN&quot; ## [37] &quot;sp|P02748|CO9_HUMAN&quot; &quot;sp|P02743|SAMP_HUMAN&quot; ## [39] &quot;sp|P00739|HPTR_HUMAN&quot; &quot;sp|P51884|LUM_HUMAN&quot; ## [41] &quot;sp|P02652|APOA2_HUMAN&quot; &quot;sp|P04217|A1BG_HUMAN&quot; ## [43] &quot;sp|A0M8Q6|LAC7_HUMAN&quot; &quot;sp|P00738|HPT_HUMAN&quot; ## [45] &quot;sp|P18428|LBP_HUMAN&quot; &quot;sp|P02765|FETUA_HUMAN&quot; ## [47] &quot;sp|P68871|HBB_HUMAN&quot; &quot;sp|P08697|A2AP_HUMAN&quot; ## [49] &quot;sp|P01857|IGHG1_HUMAN&quot; &quot;sp|P05543|THBG_HUMAN&quot; ## [51] &quot;sp|P07357|CO8A_HUMAN&quot; &quot;sp|P00450|CERU_HUMAN&quot; ## [53] &quot;sp|P07996|TSP1_HUMAN&quot; &quot;sp|P02655|APOC2_HUMAN&quot; ## [55] &quot;sp|P23142|FBLN1_HUMAN&quot; &quot;sp|P01880|IGHD_HUMAN&quot; ## [57] &quot;sp|P01834|IGKC_HUMAN&quot; &quot;sp|P01859|IGHG2_HUMAN&quot; ## [59] &quot;sp|P80748|LV302_HUMAN&quot; &quot;sp|P01860|IGHG3_HUMAN&quot; ## [61] &quot;sp|P0CG06|LAC3_HUMAN&quot; &quot;sp|P01772|HV311_HUMAN&quot; ## [63] &quot;sp|P01008|ANT3_HUMAN&quot; &quot;sp|P01031|CO5_HUMAN&quot; ## [65] &quot;sp|Q96PD5|PGRP2_HUMAN&quot; &quot;sp|P01042|KNG1_HUMAN&quot; ## [67] &quot;sp|B9A064|IGLL5_HUMAN&quot; &quot;sp|P04278|SHBG_HUMAN&quot; ## [69] &quot;sp|P02671|FIBA_HUMAN&quot; &quot;sp|P06889|LV405_HUMAN&quot; ## [71] &quot;sp|P01780|HV319_HUMAN&quot; &quot;sp|P02679|FIBG_HUMAN&quot; ## [73] &quot;sp|P01609|KV117_HUMAN&quot; &quot;sp|P06309|KV205_HUMAN&quot; ## [75] &quot;sp|P00734|THRB_HUMAN&quot; &quot;sp|P05155|IC1_HUMAN&quot; ## [77] &quot;sp|P02647|APOA1_HUMAN&quot; &quot;sp|P02775|CXCL7_HUMAN&quot; ## [79] &quot;sp|P01611|KV119_HUMAN&quot; &quot;sp|P01861|IGHG4_HUMAN&quot; ## [81] &quot;sp|P04430|KV122_HUMAN&quot; &quot;sp|P06331|HV209_HUMAN&quot; ## [83] &quot;sp|P04208|LV106_HUMAN&quot; &quot;sp|P04114|APOB_HUMAN&quot; ## [85] &quot;sp|P01602|KV110_HUMAN&quot; &quot;sp|P08185|CBG_HUMAN&quot; ## [87] &quot;sp|P02751|FINC_HUMAN&quot; &quot;sp|P06727|APOA4_HUMAN&quot; ## [89] &quot;sp|O95445|APOM_HUMAN&quot; &quot;sp|P06314|KV404_HUMAN&quot; ## [91] &quot;sp|P04438|HV208_HUMAN&quot; &quot;sp|P06311|KV311_HUMAN&quot; ## [93] &quot;sp|O75636|FCN3_HUMAN&quot; &quot;sp|P04433|KV309_HUMAN&quot; ## [95] &quot;sp|P0DJI8|SAA1_HUMAN&quot; &quot;sp|Q14624|ITIH4_HUMAN&quot; ## [97] &quot;sp|P00751|CFAB_HUMAN&quot; &quot;sp|P02750|A2GL_HUMAN&quot; ## [99] &quot;sp|P13671|CO6_HUMAN&quot; &quot;sp|P22792|CPN2_HUMAN&quot; ## [101] &quot;sp|P02763|A1AG1_HUMAN&quot; &quot;sp|P01009|A1AT_HUMAN&quot; ## [103] &quot;sp|P02656|APOC3_HUMAN&quot; This Venn diagram allows to visualize the number of proteins deemed to be differentially expressed in each pairwise comparison. library(VennDiagram) grid.newpage() draw.triple.venn(area1 = length(deProt[[1]][,1]), area2 = length(deProt[[2]][,1]), area3 = length(deProt[[3]][,1]), n12 = length(intersect(deProt[[1]][,1],deProt[[2]][,1])), n23 = length(intersect(deProt[[2]][,1],deProt[[3]][,1])), n13 = length(intersect(deProt[[1]][,1],deProt[[3]][,1])), n123 = length(Reduce(intersect, list(deProt[[1]][,1],deProt[[2]][,1],deProt[[3]][,1]))), category = c(&quot;a-c&quot;,&quot;l-c&quot;,&quot;o-c&quot;), lty = &quot;blank&quot;, fill = c(&quot;skyblue&quot;, &quot;pink1&quot;, &quot;mediumorchid&quot;)) ## (polygon[GRID.polygon.518], polygon[GRID.polygon.519], polygon[GRID.polygon.520], polygon[GRID.polygon.521], polygon[GRID.polygon.522], polygon[GRID.polygon.523], text[GRID.text.524], text[GRID.text.525], text[GRID.text.526], text[GRID.text.527], text[GRID.text.528], text[GRID.text.529], text[GRID.text.530], text[GRID.text.531], text[GRID.text.532], text[GRID.text.533]) "],
["anova.html", "4 ANOVA 4.1 loading and visualizing the data 4.2 log transform 4.3 Normalization 4.4 Differential expression annalysis", " 4 ANOVA Here we use ANOVA (analysis of variance) to identify significantly differentially expressed protein. The ANOVA test the statistical significance of the mean difference between several groups. ANOVA doesn’t allow to identify between which groups this difference is significant that is why a POST HOC test is needed to calculate the groups between which the difference is the most significant. 4.1 loading and visualizing the data data&lt;-read.table(&quot;SWATH.example.data.csv&quot;, sep=&quot;,&quot;,header=T, row.names = 1) DT::datatable(data) boxplot(data, ylab=&quot;Intensity&quot;, xlab=&quot;samples&quot;, main = &quot;distribution of Intensity&quot;) hist(as.numeric(unlist(data)), main = &quot;Histogram of Intensity distribution&quot;, xlab = &quot;Intensity&quot;) 4.2 log transform The data is log transformed so that: -the spread is even across the intensity range -the variability stays constant at all intensity levels -the distribution of experimental errors is normal -the distribution of intensity is bell shaped data &lt;- log2(data) boxplot(data, ylab=&quot;Intensity&quot;, xlab=&quot;samples&quot;) hist(as.numeric(unlist(data)), main = &quot;Histogram of Intensity distribution&quot;, xlab = &quot;Intensity&quot;) 4.3 Normalization Normalization allows to resolve the bias and errors introduced between the samples by the experimental tools or the samples preparation. Normalization relies on the fact that most of the proteins are expected to be expressed the same way between the samples, so it is necessary to remove the differences induced by the experiment to not overestimate the differencial expression. here we use the mean center and scaling normalization : centering assure that the mean of the different samples is equal (set to 0), and scaling sets the standard deviation to 1. norm.data &lt;- scale(data) ##mean center and scaling normalization boxplot(norm.data, ylab=&quot;Intensity&quot;, xlab=&quot;samples&quot;) 4.4 Differential expression annalysis 4.4.1 ANOVA test The type of ANOVA test to perform is a one-way ANOVA on each protein. Results &lt;- as.data.frame(norm.data) ## Calcul of the mean Intensity for each conditions : Results$control &lt;- rowMeans(norm.data[, c(1:10)]) Results$less1 &lt;- rowMeans(norm.data[, c(11:20)]) Results$onetofive &lt;- rowMeans(norm.data[, c(21:30)]) Results$adult &lt;- rowMeans(norm.data[, c(31:40)]) Results &lt;- Results[, c(41, 42, 43, 44)] d &lt;- data.frame(mean = 1:40, group = 1:40) for (i in 1:nrow(norm.data)) { d$prot &lt;- as.numeric(norm.data[i, ]) d$group[1:10] &lt;- &quot;control&quot; d$group[11:20] &lt;- &quot;less1&quot; d$group[21:30] &lt;- &quot;onetofive&quot; d$group[31:40] &lt;- &quot;adult&quot; model &lt;- lm(formula = prot ~ group, data = d) Results$p[i] &lt;- anova(model)$&quot;Pr(&gt;F)&quot; Results$p[i] &lt;- p.adjust(Results$p[i], method = &quot;BH&quot;) ## multiple testing correction with de Benjamini Hochberg technique } 4.4.2 Differentially expressed proteins Calcul of the maximum fold change for each protein (difference between the highest and the lowest intensity mean) : Results$FC &lt;-apply(Results[, 1:4], 1, max) - apply(Results[, 1:4], 1, min) DT::datatable(Results) A protein is considered differentially expressed if its p.value and fold change are superior to a determined threshold. The fold change represent how much a protein is differentially expressed between two conditions and the p value allows to evaluate the statistical significance of this difference. resultsANOVA &lt;-Results[which(Results$p &lt;= 0.05 &amp; abs(Results$FC) &gt;= 0.5), ] DT::datatable(resultsANOVA) plotTitle &lt;- &quot;Results of the ANOVA tests perform on each protein&quot; values &lt;- as.data.frame(Results) forplot &lt;- data.frame(x=as.numeric(values[,6]), y=-log10(values[,5]), id=row.names(values)) tmp &lt;- forplot[as.numeric(forplot$y)&gt;=-log10(tresh_fc) &amp; abs(forplot$x)&gt;tresh_fc,] p &lt;- ggplot(forplot) + geom_point(aes(x, y , label = id, color = ifelse(y&gt;=-log10(tresh_p) &amp; abs(x)&gt;=tresh_fc, &quot;DE proteins&quot;, &quot;not significant&quot;)),show.legend = F) + scale_color_manual(values = c(&quot;red&quot;, &quot;blue&quot;)) + geom_vline(xintercept = tresh_fc ) + geom_vline(xintercept = -tresh_fc) + geom_hline(yintercept = -log10(tresh_p)) + labs(title = plotTitle,x=&quot;maximum Fold-change&quot;, y=&quot;-log10(P.Value)&quot;) + theme_bw() layout(ggplotly(p, tooltip = c(&quot;x&quot;,&quot;y&quot;,&quot;id&quot;))) List of the proteins deemed as differentially expressed : res &lt;- row.names(resultsANOVA) saveRDS(res, &quot;resANOVA.rds&quot;) #saving the name of the differentially expressed proteins in a R object. print(res) ## [1] &quot;sp|A0M8Q6|LAC7_HUMAN&quot; &quot;sp|O43866|CD5L_HUMAN&quot; ## [3] &quot;sp|P00738|HPT_HUMAN&quot; &quot;sp|P01591|IGJ_HUMAN&quot; ## [5] &quot;sp|P01772|HV311_HUMAN&quot; &quot;sp|P01780|HV319_HUMAN&quot; ## [7] &quot;sp|P01834|IGKC_HUMAN&quot; &quot;sp|P01859|IGHG2_HUMAN&quot; ## [9] &quot;sp|P01861|IGHG4_HUMAN&quot; &quot;sp|P01871|IGHM_HUMAN&quot; ## [11] &quot;sp|P01876|IGHA1_HUMAN&quot; &quot;sp|P01877|IGHA2_HUMAN&quot; ## [13] &quot;sp|P02452|CO1A1_HUMAN&quot; &quot;sp|P02771|FETA_HUMAN&quot; ## [15] &quot;sp|P04003|C4BPA_HUMAN&quot; &quot;sp|P04196|HRG_HUMAN&quot; ## [17] &quot;sp|P04220|MUCB_HUMAN&quot; &quot;sp|P04278|SHBG_HUMAN&quot; ## [19] &quot;sp|P04430|KV122_HUMAN&quot; &quot;sp|P04438|HV208_HUMAN&quot; ## [21] &quot;sp|P06311|KV311_HUMAN&quot; &quot;sp|P06889|LV405_HUMAN&quot; ## [23] &quot;sp|P07357|CO8A_HUMAN&quot; &quot;sp|P07951|TPM2_HUMAN&quot; ## [25] &quot;sp|P68871|HBB_HUMAN&quot; &quot;sp|P69891|HBG1_HUMAN&quot; ## [27] &quot;sp|P69892|HBG2_HUMAN&quot; &quot;sp|P69905|HBA_HUMAN&quot; ## [29] &quot;sp|P80748|LV302_HUMAN&quot; &quot;sp|Q13790|APOF_HUMAN&quot; ## [31] &quot;sp|Q9Y490|TLN1_HUMAN&quot; 4.4.3 post hoc analysis The post hoc analysis is done using the tukey’s test to determine the significants pairwise comparisons. DEprot &lt;- as.data.frame(data[which(row.names(data) %in% row.names(resultsANOVA)),]) d &lt;- data.frame(mean = 1:40, group = 1:40) for (i in 1:nrow(DEprot)) { d$prot &lt;- as.numeric(DEprot[i, ]) d$group[1:10] &lt;- &quot;control&quot; d$group[11:20] &lt;- &quot;less1&quot; d$group[21:30] &lt;- &quot;onetofive&quot; d$group[31:40] &lt;- &quot;adult&quot; print(paste0(row.names(DEprot[i,]), &quot; :&quot;)) print(TukeyHSD(aov(prot ~ group, data = d))) } ## [1] &quot;sp|A0M8Q6|LAC7_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -5.7901321 -8.871597 -2.708667 0.0000713 ## less1-adult -5.0112034 -8.092668 -1.929739 0.0005470 ## onetofive-adult -0.5005643 -3.582029 2.580901 0.9715746 ## less1-control 0.7789287 -2.302536 3.860394 0.9037156 ## onetofive-control 5.2895678 2.208103 8.371033 0.0002661 ## onetofive-less1 4.5106391 1.429174 7.592104 0.0019395 ## ## [1] &quot;sp|O43866|CD5L_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -3.01848339 -3.8540813 -2.1828854 0.0000000 ## less1-adult -0.31524837 -1.1508463 0.5203496 0.7411622 ## onetofive-adult -0.07232455 -0.9079225 0.7632734 0.9954573 ## less1-control 2.70323502 1.8676371 3.5388330 0.0000000 ## onetofive-control 2.94615884 2.1105609 3.7817568 0.0000000 ## onetofive-less1 0.24292382 -0.5926741 1.0785218 0.8616696 ## ## [1] &quot;sp|P00738|HPT_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -2.5714212 -4.0761936 -1.066649 0.0002831 ## less1-adult 0.2175037 -1.2872687 1.722276 0.9796537 ## onetofive-adult 0.8661509 -0.6386215 2.370923 0.4191780 ## less1-control 2.7889248 1.2841525 4.293697 0.0000879 ## onetofive-control 3.4375720 1.9327997 4.942344 0.0000025 ## onetofive-less1 0.6486472 -0.8561252 2.153420 0.6548342 ## ## [1] &quot;sp|P01591|IGJ_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -3.7127897 -4.3875451 -3.03803439 0.0000000 ## less1-adult -1.1795047 -1.8542601 -0.50474940 0.0002066 ## onetofive-adult -0.6598179 -1.3345732 0.01493748 0.0572582 ## less1-control 2.5332850 1.8585297 3.20804033 0.0000000 ## onetofive-control 3.0529719 2.3782165 3.72772721 0.0000000 ## onetofive-less1 0.5196869 -0.1550685 1.19444221 0.1808932 ## ## [1] &quot;sp|P01772|HV311_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.09631513 -0.9353874 0.74275709 0.9895787 ## less1-adult -2.81720492 -3.6562771 -1.97813270 0.0000000 ## onetofive-adult -0.86806710 -1.7071393 -0.02899487 0.0402875 ## less1-control -2.72088979 -3.5599620 -1.88181757 0.0000000 ## onetofive-control -0.77175197 -1.6108242 0.06732026 0.0808205 ## onetofive-less1 1.94913782 1.1100656 2.78821005 0.0000018 ## ## [1] &quot;sp|P01780|HV319_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.3501314 -1.387460 0.6871967 0.8001333 ## less1-adult -3.1179651 -4.155293 -2.0806370 0.0000000 ## onetofive-adult -0.4735799 -1.510908 0.5637482 0.6125450 ## less1-control -2.7678337 -3.805162 -1.7305056 0.0000001 ## onetofive-control -0.1234485 -1.160777 0.9138796 0.9884203 ## onetofive-less1 2.6443851 1.607057 3.6817132 0.0000003 ## ## [1] &quot;sp|P01834|IGKC_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.2342317 -0.6215663 0.1531029 0.3758523 ## less1-adult -1.8071521 -2.1944867 -1.4198175 0.0000000 ## onetofive-adult -0.7513006 -1.1386351 -0.3639660 0.0000434 ## less1-control -1.5729204 -1.9602550 -1.1855858 0.0000000 ## onetofive-control -0.5170688 -0.9044034 -0.1297343 0.0051008 ## onetofive-less1 1.0558516 0.6685170 1.4431861 0.0000001 ## ## [1] &quot;sp|P01859|IGHG2_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.5850435 -1.0112696 -0.1588174 0.0038602 ## less1-adult -2.2825023 -2.7087285 -1.8562762 0.0000000 ## onetofive-adult -1.6672961 -2.0935222 -1.2410700 0.0000000 ## less1-control -1.6974589 -2.1236850 -1.2712327 0.0000000 ## onetofive-control -1.0822526 -1.5084787 -0.6560265 0.0000003 ## onetofive-less1 0.6152062 0.1889801 1.0414324 0.0022663 ## ## [1] &quot;sp|P01861|IGHG4_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.4099702 -1.6192533 0.7993130 0.7980258 ## less1-adult -2.8629903 -4.0722734 -1.6537071 0.0000013 ## onetofive-adult -1.4465676 -2.6558507 -0.2372844 0.0137588 ## less1-control -2.4530201 -3.6623032 -1.2437369 0.0000209 ## onetofive-control -1.0365974 -2.2458805 0.1726858 0.1149299 ## onetofive-less1 1.4164227 0.2071396 2.6257059 0.0163401 ## ## [1] &quot;sp|P01871|IGHM_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -3.1933167 -3.9651916 -2.4214418 0.0000000 ## less1-adult -0.4986633 -1.2705383 0.2732116 0.3186070 ## onetofive-adult -0.1930466 -0.9649215 0.5788283 0.9063912 ## less1-control 2.6946533 1.9227784 3.4665282 0.0000000 ## onetofive-control 3.0002701 2.2283952 3.7721450 0.0000000 ## onetofive-less1 0.3056167 -0.4662582 1.0774917 0.7118565 ## ## [1] &quot;sp|P01876|IGHA1_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -5.872685 -6.5464700 -5.1989009 0.00e+00 ## less1-adult -2.810060 -3.4838441 -2.1362751 0.00e+00 ## onetofive-adult -1.530537 -2.2043212 -0.8567521 2.80e-06 ## less1-control 3.062626 2.3888413 3.7364104 0.00e+00 ## onetofive-control 4.342149 3.6683643 5.0159334 0.00e+00 ## onetofive-less1 1.279523 0.6057384 1.9533075 6.06e-05 ## ## [1] &quot;sp|P01877|IGHA2_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -4.806729 -5.6400481 -3.973410 0.0000000 ## less1-adult -3.630013 -4.4633323 -2.796694 0.0000000 ## onetofive-adult -2.160586 -2.9939053 -1.327267 0.0000002 ## less1-control 1.176716 0.3433967 2.010035 0.0028721 ## onetofive-control 2.646143 1.8128237 3.479462 0.0000000 ## onetofive-less1 1.469427 0.6361079 2.302746 0.0001826 ## ## [1] &quot;sp|P02452|CO1A1_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 3.0742643 2.5585846 3.5899439 0.0000000 ## less1-adult 2.6744812 2.1588016 3.1901609 0.0000000 ## onetofive-adult 2.0347585 1.5190789 2.5504382 0.0000000 ## less1-control -0.3997830 -0.9154627 0.1158966 0.1763913 ## onetofive-control -1.0395057 -1.5551854 -0.5238261 0.0000232 ## onetofive-less1 -0.6397227 -1.1554023 -0.1240431 0.0100834 ## ## [1] &quot;sp|P02771|FETA_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 2.77493899 1.9077198 3.6421582 0.0000000 ## less1-adult -0.01802518 -0.8852444 0.8491940 0.9999358 ## onetofive-adult -0.19525074 -1.0624699 0.6719684 0.9293921 ## less1-control -2.79296417 -3.6601833 -1.9257450 0.0000000 ## onetofive-control -2.97018973 -3.8374089 -2.1029706 0.0000000 ## onetofive-less1 -0.17722556 -1.0444447 0.6899936 0.9458429 ## ## [1] &quot;sp|P04003|C4BPA_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -1.63749046 -2.159661040 -1.1153199 0.0000000 ## less1-adult 0.02283876 -0.499331821 0.5450093 0.9994041 ## onetofive-adult 0.52747151 0.005300924 1.0496421 0.0469517 ## less1-control 1.66032922 1.138158635 2.1824998 0.0000000 ## onetofive-control 2.16496196 1.642791381 2.6871325 0.0000000 ## onetofive-less1 0.50463275 -0.017537838 1.0268033 0.0613613 ## ## [1] &quot;sp|P04196|HRG_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -1.82967296 -2.41346118 -1.2458847 0.0000000 ## less1-adult -0.08428206 -0.66807028 0.4995062 0.9797232 ## onetofive-adult 0.51954051 -0.06424771 1.1033287 0.0958337 ## less1-control 1.74539090 1.16160268 2.3291791 0.0000000 ## onetofive-control 2.34921347 1.76542525 2.9330017 0.0000000 ## onetofive-less1 0.60382257 0.02003435 1.1876108 0.0403482 ## ## [1] &quot;sp|P04220|MUCB_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -3.54526657 -4.3207014 -2.7698317 0.0000000 ## less1-adult -0.54510946 -1.3205443 0.2303254 0.2488625 ## onetofive-adult -0.58957134 -1.3650062 0.1858635 0.1899103 ## less1-control 3.00015711 2.2247223 3.7755920 0.0000000 ## onetofive-control 2.95569523 2.1802604 3.7311301 0.0000000 ## onetofive-less1 -0.04446189 -0.8198967 0.7309730 0.9986630 ## ## [1] &quot;sp|P04278|SHBG_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.6295416 -1.5969763 0.3378932 0.3124475 ## less1-adult 1.5576211 0.5901864 2.5250559 0.0006218 ## onetofive-adult 1.4222921 0.4548573 2.3897269 0.0018472 ## less1-control 2.1871627 1.2197279 3.1545975 0.0000031 ## onetofive-control 2.0518337 1.0843989 3.0192684 0.0000098 ## onetofive-less1 -0.1353290 -1.1027638 0.8321058 0.9814872 ## ## [1] &quot;sp|P04430|KV122_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 0.1056872 -1.2606774 1.4720518 0.9967436 ## less1-adult -2.0455838 -3.4119484 -0.6792192 0.0015019 ## onetofive-adult -0.8431321 -2.2094967 0.5232325 0.3582148 ## less1-control -2.1512709 -3.5176355 -0.7849063 0.0008229 ## onetofive-control -0.9488192 -2.3151839 0.4175454 0.2586419 ## onetofive-less1 1.2024517 -0.1639129 2.5688163 0.1013123 ## ## [1] &quot;sp|P04438|HV208_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 1.5672916 -1.1022874 4.2368707 0.4018158 ## less1-adult -1.7530988 -4.4226778 0.9164802 0.3047239 ## onetofive-adult 0.4274666 -2.2421124 3.0970456 0.9727156 ## less1-control -3.3203904 -5.9899694 -0.6508114 0.0098542 ## onetofive-control -1.1398250 -3.8094041 1.5297540 0.6615729 ## onetofive-less1 2.1805654 -0.4890136 4.8501444 0.1426308 ## ## [1] &quot;sp|P06311|KV311_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -1.0142265 -2.332996610 0.3045435 0.1818955 ## less1-adult -2.7882112 -4.106981243 -1.4694411 0.0000103 ## onetofive-adult -1.4642981 -2.783068195 -0.1455281 0.0246484 ## less1-control -1.7739846 -3.092754696 -0.4552146 0.0047303 ## onetofive-control -0.4500716 -1.768841648 0.8686985 0.7948039 ## onetofive-less1 1.3239130 0.005142984 2.6426831 0.0488089 ## ## [1] &quot;sp|P06889|LV405_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 0.5008854 -0.2869692 1.2887400 0.3323582 ## less1-adult 2.1191264 1.3312718 2.9069810 0.0000001 ## onetofive-adult 1.6582000 0.8703454 2.4460546 0.0000112 ## less1-control 1.6182410 0.8303864 2.4060956 0.0000170 ## onetofive-control 1.1573146 0.3694600 1.9451692 0.0018646 ## onetofive-less1 -0.4609264 -1.2487810 0.3269282 0.4048935 ## ## [1] &quot;sp|P07357|CO8A_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -1.15095517 -1.8763741 -0.4255362 0.0007479 ## less1-adult 0.23870192 -0.4867170 0.9641209 0.8119816 ## onetofive-adult 0.09317595 -0.6322430 0.8185949 0.9855396 ## less1-control 1.38965708 0.6642381 2.1150760 0.0000529 ## onetofive-control 1.24413111 0.5187122 1.9695501 0.0002694 ## onetofive-less1 -0.14552597 -0.8709449 0.5798930 0.9485485 ## ## [1] &quot;sp|P07951|TPM2_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -3.263080 -4.86037430 -1.66578621 0.0000186 ## less1-adult -4.448733 -6.04602745 -2.85143936 0.0000000 ## onetofive-adult -1.570504 -3.16779811 0.02678998 0.0554191 ## less1-control -1.185653 -2.78294720 0.41164089 0.2072186 ## onetofive-control 1.692576 0.09528214 3.28987023 0.0343278 ## onetofive-less1 2.878229 1.28093529 4.47552338 0.0001336 ## ## [1] &quot;sp|P68871|HBB_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 2.27226418 0.8192076 3.7253207 0.0008946 ## less1-adult 1.80519227 0.3521357 3.2582488 0.0099558 ## onetofive-adult 2.26401041 0.8109539 3.7170670 0.0009352 ## less1-control -0.46707191 -1.9201285 0.9859847 0.8223706 ## onetofive-control -0.00825377 -1.4613103 1.4448028 0.9999987 ## onetofive-less1 0.45881814 -0.9942384 1.9118747 0.8299611 ## ## [1] &quot;sp|P69891|HBG1_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 6.5506832 5.0276155 8.073751 0.0000000 ## less1-adult -0.1112053 -1.6342730 1.411862 0.9972558 ## onetofive-adult 0.4869378 -1.0361298 2.010006 0.8247004 ## less1-control -6.6618885 -8.1849562 -5.138821 0.0000000 ## onetofive-control -6.0637454 -7.5868130 -4.540678 0.0000000 ## onetofive-less1 0.5981431 -0.9249245 2.121211 0.7169680 ## ## [1] &quot;sp|P69892|HBG2_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 8.3601074 7.3784942 9.3417206 0.0000000 ## less1-adult 0.7485243 -0.2330889 1.7301376 0.1878412 ## onetofive-adult 0.3410306 -0.6405827 1.3226438 0.7859666 ## less1-control -7.6115831 -8.5931963 -6.6299698 0.0000000 ## onetofive-control -8.0190768 -9.0006901 -7.0374636 0.0000000 ## onetofive-less1 -0.4074938 -1.3891070 0.5741195 0.6809517 ## ## [1] &quot;sp|P69905|HBA_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult 4.2892593 2.9165882 5.6619304 0.0000000 ## less1-adult 1.6534762 0.2808051 3.0261473 0.0129827 ## onetofive-adult 1.9682440 0.5955729 3.3409151 0.0024358 ## less1-control -2.6357831 -4.0084542 -1.2631120 0.0000509 ## onetofive-control -2.3210153 -3.6936864 -0.9483442 0.0003270 ## onetofive-less1 0.3147678 -1.0579033 1.6874389 0.9257987 ## ## [1] &quot;sp|P80748|LV302_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -0.05071974 -0.5493383 0.4478988 0.9926878 ## less1-adult -1.96522364 -2.4638422 -1.4666051 0.0000000 ## onetofive-adult -0.87023877 -1.3688573 -0.3716202 0.0002112 ## less1-control -1.91450390 -2.4131225 -1.4158853 0.0000000 ## onetofive-control -0.81951903 -1.3181376 -0.3209005 0.0004768 ## onetofive-less1 1.09498487 0.5963663 1.5936034 0.0000053 ## ## [1] &quot;sp|Q13790|APOF_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -2.2245040 -2.8725872 -1.5764207 0.0000000 ## less1-adult -0.4228196 -1.0709028 0.2252637 0.3102558 ## onetofive-adult -0.2268204 -0.8749037 0.4212628 0.7822280 ## less1-control 1.8016844 1.1536012 2.4497677 0.0000000 ## onetofive-control 1.9976835 1.3496003 2.6457668 0.0000000 ## onetofive-less1 0.1959991 -0.4520841 0.8440824 0.8472090 ## ## [1] &quot;sp|Q9Y490|TLN1_HUMAN :&quot; ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = prot ~ group, data = d) ## ## $group ## diff lwr upr p adj ## control-adult -2.2272064 -3.20131886 -1.2530940 0.0000025 ## less1-adult -2.4174355 -3.39154789 -1.4433230 0.0000005 ## onetofive-adult -1.3546933 -2.32880569 -0.3805808 0.0033727 ## less1-control -0.1902290 -1.16434145 0.7838834 0.9522516 ## onetofive-control 0.8725132 -0.10159926 1.8466256 0.0927677 ## onetofive-less1 1.0627422 0.08862977 2.0368546 0.0280067 ` "],
["comparison-of-the-differents-statistical-test.html", "5 Comparison of the differents statistical test", " 5 Comparison of the differents statistical test Loading the proteins deemed as differentially expressed by the different statistical test. resSCL &lt;- readRDS(&quot;resSCL.rds&quot;) resLIMMA &lt;- readRDS(&quot;resLIMMA.rds&quot;) resANOVA &lt;- readRDS(&quot;resANOVA.rds&quot;) Venn diagram of the number of protein identified as differentialy expressed by the differents statistical test : library(VennDiagram) grid.newpage() draw.triple.venn(area1 = length(resSCL), area2 = length(resLIMMA), area3 = length(resANOVA), n12 = length(intersect(resSCL,resLIMMA)), n23 = length(intersect(resLIMMA,resANOVA)), n13 = length(intersect(resSCL,resANOVA)), n123 = length(Reduce(intersect, list(resSCL,resLIMMA,resANOVA))), category = c(&quot;scaling and centering&quot;, &quot;LIMMA&quot;, &quot;ANOVA&quot;), lty = &quot;blank&quot;, fill = c(&quot;skyblue&quot;, &quot;pink1&quot;, &quot;mediumorchid&quot;)) ## (polygon[GRID.polygon.534], polygon[GRID.polygon.535], polygon[GRID.polygon.536], polygon[GRID.polygon.537], polygon[GRID.polygon.538], polygon[GRID.polygon.539], text[GRID.text.540], text[GRID.text.541], text[GRID.text.542], text[GRID.text.543], text[GRID.text.544], text[GRID.text.545]) List of the proteins identified as differentialy expressed only by ANOVA. setdiff(resANOVA,resSCL) ## [1] &quot;sp|P01859|IGHG2_HUMAN&quot; &quot;sp|P06311|KV311_HUMAN&quot; List of the proteins identified as differentialy expressed only by using LIMMA. setdiff(resLIMMA, resANOVA) ## [1] &quot;sp|P02790|HEMO_HUMAN&quot; &quot;sp|P01023|A2MG_HUMAN&quot; ## [3] &quot;sp|P02649|APOE_HUMAN&quot; &quot;sp|Q06033|ITIH3_HUMAN&quot; ## [5] &quot;sp|P07225|PROS_HUMAN&quot; &quot;sp|P05546|HEP2_HUMAN&quot; ## [7] &quot;sp|P33151|CADH5_HUMAN&quot; &quot;sp|P00747|PLMN_HUMAN&quot; ## [9] &quot;sp|P10643|CO7_HUMAN&quot; &quot;sp|P27169|PON1_HUMAN&quot; ## [11] &quot;sp|P10909|CLUS_HUMAN&quot; &quot;sp|P07360|CO8G_HUMAN&quot; ## [13] &quot;sp|P35858|ALS_HUMAN&quot; &quot;sp|Q96IY4|CBPB2_HUMAN&quot; ## [15] &quot;sp|P07358|CO8B_HUMAN&quot; &quot;sp|P02675|FIBB_HUMAN&quot; ## [17] &quot;sp|P60709|ACTB_HUMAN&quot; &quot;sp|P03952|KLKB1_HUMAN&quot; ## [19] &quot;sp|P01019|ANGT_HUMAN&quot; &quot;sp|P19652|A1AG2_HUMAN&quot; ## [21] &quot;sp|P02748|CO9_HUMAN&quot; &quot;sp|P02743|SAMP_HUMAN&quot; ## [23] &quot;sp|P00739|HPTR_HUMAN&quot; &quot;sp|P51884|LUM_HUMAN&quot; ## [25] &quot;sp|P02652|APOA2_HUMAN&quot; &quot;sp|P04217|A1BG_HUMAN&quot; ## [27] &quot;sp|P18428|LBP_HUMAN&quot; &quot;sp|P02765|FETUA_HUMAN&quot; ## [29] &quot;sp|P08697|A2AP_HUMAN&quot; &quot;sp|P01857|IGHG1_HUMAN&quot; ## [31] &quot;sp|P05543|THBG_HUMAN&quot; &quot;sp|P00450|CERU_HUMAN&quot; ## [33] &quot;sp|P07996|TSP1_HUMAN&quot; &quot;sp|P02655|APOC2_HUMAN&quot; ## [35] &quot;sp|P23142|FBLN1_HUMAN&quot; &quot;sp|P01880|IGHD_HUMAN&quot; ## [37] &quot;sp|P01860|IGHG3_HUMAN&quot; &quot;sp|P0CG06|LAC3_HUMAN&quot; ## [39] &quot;sp|P01008|ANT3_HUMAN&quot; &quot;sp|P01031|CO5_HUMAN&quot; ## [41] &quot;sp|Q96PD5|PGRP2_HUMAN&quot; &quot;sp|P01042|KNG1_HUMAN&quot; ## [43] &quot;sp|B9A064|IGLL5_HUMAN&quot; &quot;sp|P02671|FIBA_HUMAN&quot; ## [45] &quot;sp|P02679|FIBG_HUMAN&quot; &quot;sp|P01609|KV117_HUMAN&quot; ## [47] &quot;sp|P06309|KV205_HUMAN&quot; &quot;sp|P00734|THRB_HUMAN&quot; ## [49] &quot;sp|P05155|IC1_HUMAN&quot; &quot;sp|P02647|APOA1_HUMAN&quot; ## [51] &quot;sp|P02775|CXCL7_HUMAN&quot; &quot;sp|P01611|KV119_HUMAN&quot; ## [53] &quot;sp|P06331|HV209_HUMAN&quot; &quot;sp|P04208|LV106_HUMAN&quot; ## [55] &quot;sp|P04114|APOB_HUMAN&quot; &quot;sp|P01602|KV110_HUMAN&quot; ## [57] &quot;sp|P08185|CBG_HUMAN&quot; &quot;sp|P02751|FINC_HUMAN&quot; ## [59] &quot;sp|P06727|APOA4_HUMAN&quot; &quot;sp|O95445|APOM_HUMAN&quot; ## [61] &quot;sp|P06314|KV404_HUMAN&quot; &quot;sp|O75636|FCN3_HUMAN&quot; ## [63] &quot;sp|P04433|KV309_HUMAN&quot; &quot;sp|P0DJI8|SAA1_HUMAN&quot; ## [65] &quot;sp|Q14624|ITIH4_HUMAN&quot; &quot;sp|P00751|CFAB_HUMAN&quot; ## [67] &quot;sp|P02750|A2GL_HUMAN&quot; &quot;sp|P13671|CO6_HUMAN&quot; ## [69] &quot;sp|P22792|CPN2_HUMAN&quot; &quot;sp|P02763|A1AG1_HUMAN&quot; ## [71] &quot;sp|P01009|A1AT_HUMAN&quot; &quot;sp|P02656|APOC3_HUMAN&quot; "]
]
